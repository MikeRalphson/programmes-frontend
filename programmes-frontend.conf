map $http_x_bbc_edge_scheme $real_protocol {
    default "http";
    https "https";
}
map $http_x_cluster_client_ip $real_ip {
    default $remote_addr;
    ~. $http_x_cluster_client_ip;
}

upstream backend {
    server unix:/tmp/php.sock;
}

server {
    listen 7080 default;
    listen 7443 ssl;
    root /var/www/programmes-frontend/web;
    index app.php;

    server_name localhost;
    underscores_in_headers on;

    ssl_certificate     /etc/pki/tls/certs/service_chain.crt;
    ssl_certificate_key /etc/pki/tls/private/service.key;


    ssl_verify_client off;
    ssl_verify_depth 3;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
    ssl_prefer_server_ciphers on;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 5m;

    location ~* ^/programmes/_cloudlabs/([a-z0-9]+)/?$ {
         set $progs_pid $1;
         rewrite_by_lua_block {
            if not ngx.var.progs_pid then
              ngx.log(ngx.ERR,"ERROR - no progs_pid defined")
              return
            end
            local mysql = require "resty.mysql"
            local db, err = mysql:new()
            if not db then
                ngx.log(ngx.ERR,"MySQL failed to initialise: ", err)
                ngx.exit(500)
                return
            end

            db:set_timeout(2000) -- 2 sec
            local ok, err, errno, sqlstate = db:connect
            {
                host = "127.0.0.1",
                port = 3306,
                database = "$database_name",
                user = "$database_user",
                password = "$database_password",
                max_packet_size = 1024 * 1024,
                pool="programmes"
            }

            if not ok then
                ngx.log(ngx.ERR,"MySQL failed to connect: ", err, ": ", errno, " ", sqlstate)
                ngx.exit(500)
                return
            end
            -- Old style mysql_real_escape_string encoding! What could go wrong?
            -- This module does not support named parameters by the way
            local pid = ngx.quote_sql_str(ngx.var.progs_pid)
            local sql = "select type from core_entity where pid = " .. pid
            local result,err,errno,sqlstate = db:query(sql,1)
            -- This closes DB and returns connection to pool for re-use
            -- It specifies to keep 30 connections alive for 2 seconds
            local ok, err = db:set_keepalive(2000, 30)
            if result and result[1] and result[1].type then
                local type = result[1].type
                -- Whitelist of findByPid types that programmes-frontend can serve
                if type == "brand" or type == "collection" then
                    return
                end
                ngx.exec("@programmesproxy")
            end
         }
         try_files $uri $uri/ /app.php$is_args$args;
    }

    location @programmesproxy {
        resolver 10.48.192.2 ipv6=off;
        #set $real_protocol = "http";
        #rewrite_by_lua_block {
        #    local realHost = ngx.var.x-bbc-edge-host;
        #    if realHost then
        #        ngx.req.set_header("host", realHost)
        #    end
        #    local realProtocol = ngx.var.x-bbc-edge-scheme
        #    if realProtocol and (realProtocol == "http" or realProtocol == "https") then
        #        ngx.var.real_protocol = realProtocol
        #    end
        #}
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $real_ip;
        rewrite ^/programmes/_cloudlabs(.*)  /programmes$1 break;
        proxy_http_version 1.1;

        proxy_pass "$real_protocol://$v2_backend_domain";
    }


    location / {
        try_files $uri $uri/ /app.php$is_args$args;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass backend;
        fastcgi_index app.php;
        fastcgi_param SCRIPT_FILENAME /var/www/programmes-frontend/web$fastcgi_script_name;
        fastcgi_param APP_ENV test;
        fastcgi_param APP_RELEASE_NUMBER 26;
        fastcgi_param SSL_CLIENT_VERIFY $ssl_client_verify if_not_empty;
        fastcgi_param SSL_CLIENT_SUBJECT_DN $ssl_client_s_dn if_not_empty;
        fastcgi_param SSL_CLIENT_ISSUER_DN $ssl_client_i_dn if_not_empty;
        include fastcgi_params;
    }

    location ~ ^/(php_status|php_ping)$ {
        fastcgi_pass backend;
        fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;
        include fastcgi_params;
        allow 127.0.0.1;
        deny all;
    }

    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
}
